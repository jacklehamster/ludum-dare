package {	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;		public class Mixo extends EventDispatcher {		var IDLEWAIT = 1000;		var url = "http://hamster.agilityhoster.com/mixo.php";		var urlloader:URLLoader = new URLLoader();		var request:URLRequest;		var connected = false;		var inprogress = false;		var idle_status:Boolean = false;		var disconnecttimer:Timer = new Timer(IDLEWAIT,1);		var timeout;		public function Mixo() {			request = new URLRequest(url)			request.data = new URLVariables();			request.data.lock = 1;			urlloader.addEventListener(Event.COMPLETE,outCom);			disconnecttimer.addEventListener(TimerEvent.TIMER_COMPLETE,disconnect);		}				function outCom(e) {			inprogress = false;			var response:Object = JSON.parse(e.currentTarget.data);			if(response.mixi) {				request.data.mixi = response.mixi;				dispatchEvent(CustomEvent.create("com",{response:response}));			}			timeout = setTimeout(doRequest,100);		}				function doRequest() {			if(timeout) {				clearTimeout(timeout);			}			if(connected) {				inprogress = true;				request.data.time = new Date().getTime();				urlloader.load(request);			}		}				function connect(e=null) {			if(!connected) {				connected = true;				doRequest();				dispatchEvent(new Event("connect"));			}		}				function disconnect(e=null) {			if(connected) {				connected = false;				if(inprogress) {					inprogress = false;					urlloader.close();				}				dispatchEvent(new Event("disconnect"));			}		}				public function get idle():Boolean {			return idle;		}				public function set idle(value:Boolean) {			if(idle_status!=value) {				idle_status = value;				if(idle_status) {					disconnecttimer.start();				}				else {					disconnecttimer.stop();					if(!connected) {						connect();					}				}			}		}	}}